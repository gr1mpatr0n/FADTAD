name: Build static deps (libffi, SDL2)

on:
  push:
  pull_request:

env:
  LIBFFI_VERSION: "3.5.2"
  SDL2_VERSION: "2.32.10"

jobs:
  deps:
    name: Build on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest]
    
    env:
      PREFIX: ${{ github.workspace }}/third_party/pfx
      SRC:    ${{ github.workspace }}/third_party/src
      BUILD:  ${{ github.workspace }}/third_party/build

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install toolchains and build deps (Ubuntu)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            build-essential autoconf automake libtool pkg-config \
            cmake ninja-build curl ca-certificates

      - name: Install toolchains and build deps (macOS)
        if: runner.os == 'macOS'
        run: |
          brew update
          brew install autoconf automake libtool pkg-config cmake ninja curl || true

      - name: Prepare folders
        run: |
          mkdir -p "$PREFIX" "$SRC" "$BUILD"

      - name: Cache static deps install prefix
        id: cache-prefix
        uses: actions/cache@v4
        with:
          path: ${{ env.PREFIX }}
          key: deps-${{ runner.os }}-libffi-${{ env.LIBFFI_VERSION }}-sdl2-${{ env.SDL2_VERSION }}

      - name: Download libffi
        if: steps.cache-prefix.outputs.cache-hit != 'true'
        working-directory: ${{ env.SRC }}
        run: |
          set -euxo pipefail
          curl -fsSL "https://github.com/libffi/libffi/releases/download/v${LIBFFI_VERSION}/libffi-${LIBFFI_VERSION}.tar.gz" -o libffi.tar.gz
          tar -xzf libffi.tar.gz
      
      - name: Build & install libffi (static)
        if: steps.cache-prefix.outputs.cache-hit != 'true'
        working-directory: ${{ env.SRC }}/libffi-${{ env.LIBFFI_VERSION }}
        env:
          CFLAGS: "-O2 -fPIC"
        run: |
          set -euxo pipefail
          if [ ! -f configure ]; then ./autogen.sh; fi
          ./configure --prefix="${PREFIX}" --disable-shared --enable-static
          make -j"$(getconf _NPROCESSORS_ONLN || sysctl -n hw.ncpu)"
          make install
          test -f "${PREFIX}/lib/libffi.a"
      
      - name: Configure SDL2 (CMake, static)
        if: steps.cache-prefix.outputs.cache-hit != 'true'
        run: |
          set -euxo pipefail
          cmake -S "${SRC}/SDL2-${SDL2_VERSION}" -B "${BUILD}/sdl2" \
            -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_POSITION_INDEPENDENT_CODE=ON \
            -DCMAKE_INSTALL_PREFIX="${PREFIX}" \
            -DBUILD_SHARED_LIBS=OFF \
            -DSDL_SHARED=OFF \
            -DSDL_STATIC=ON \
            -DSDL_TEST=OFF
      - name: Build & install SDL2 (static)
        if: steps.cache-prefix.outputs.cache-hit != 'true'
        run: |
          set -euxo pipefail
          cmake --build "${BUILD}/sdl2" --config Release -- -j"$(getconf _NPROCESSORS_ONLN || sysctl -n hw.ncpu)"
          cmake --install "${BUILD}/sdl2"
          # Sanity check: confirm libSDL2.a exists (macOS uses libSDL2.a, Linux as well)
          test -f "${PREFIX}/lib/libSDL2.a" || (echo "libSDL2.a not found" && ls -la "${PREFIX}/lib" && exit 1)

      - name: Show resulting tree
        run: |
          echo "Installed to ${PREFIX}"
          find "${PREFIX}" -maxdepth 2 -type f \( -name '*.a' -o -name '*.pc' \) -print

      - name: Upload deps artifact
        uses: actions/upload-artifact@v4
        with:
          name: static-deps-${{ runner.os }}
          path: ${{ env.PREFIX }}
          if-no-files-found: error